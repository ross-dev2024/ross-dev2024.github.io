import{_ as i,c as t,d as s,o as a}from"./app-CzQcJAGt.js";const n={};function l(p,e){return a(),t("div",null,e[0]||(e[0]=[s(`<div class="hint-container info"><p class="hint-container-title">提问</p><p>Github: <a href="https://github.com/type-challenges/type-challenges/blob/main/questions/00189-easy-awaited/" target="_blank" rel="noopener noreferrer">Awaited</a></p><p>假如我们有一个 <code>Promise</code> 对象，这个 Promise 对象会返回一个类型。在 <code>TS</code> 中，我们用 <code>Promise</code> 中的 <code>T</code> 来描述这个 <code>Promise</code> 返回的类型。请你实现一个类型，可以获取这个类型。</p><p>例如：<code>Promise&lt;ExampleType&gt;</code>，请你返回 ExampleType 类型。</p><div class="language-ts" data-ext="ts" data-title="ts"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">type</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> ExampleType</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Promise</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">string</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">type</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Result</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyAwaited</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">ExampleType</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // string</span></span></code></pre></div></div><h3 id="解题思路" tabindex="-1"><a class="header-anchor" href="#解题思路"><span>解题思路</span></a></h3><p>这个挑战中，需要对类型 <code>Promise&lt;ExampleType&gt;</code> 进行展开，<strong>展开</strong> 指的是，从一个类型中提取其内部的类型。 在 typescript 中，可以通过 <strong>条件类型的类型推断</strong>，将推断结果赋值给 类型参数，这里需要借助 关键词 <code>infer</code>。 需要注意的是，条件类型的类型推断，只能在条件分支为 <code>true</code> 中可以使用 类型参数。</p><p>在题目的示例中，<code>Promise&lt;string&gt;</code> 展开类型为 <code>string</code> ，但我们需要处理 <code>T</code> 的任意情况，包括 <code>&lt;Promise&lt;Promise&lt;string&gt;&gt;</code>。这时候还需要运用到 typescript 的 <strong>类型递归</strong>，直到不能展开为止，这个过程是调用 <code>MyAwaited</code>自身实现的。</p><h3 id="答案" tabindex="-1"><a class="header-anchor" href="#答案"><span>答案</span></a></h3><div class="language-ts" data-ext="ts" data-title="ts"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">type</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyAwaited</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> T</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> PromiseLike</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">infer</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> R</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ?</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> MyAwaited</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">R</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> :</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> T</span></span></code></pre></div><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h3><blockquote><ul><li><a href="https://www.typescriptlang.org/docs/handbook/2/conditional-types.html" target="_blank" rel="noopener noreferrer">条件类型 Conditional Types</a></li><li><a href="https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#inferring-within-conditional-types" target="_blank" rel="noopener noreferrer">条件类型中的类型推断 Type Inference in Conditional Types</a></li></ul></blockquote>`,8)]))}const r=i(n,[["render",l],["__file","index.html.vue"]]),h=JSON.parse(`{"path":"/type-challenges/easy/awaited/","title":"Awaited","lang":"zh-CN","frontmatter":{"title":"Awaited","icon":"ph:check-bold","createTime":"2022/12/01 04:16:56","author":"pengzhanbo","permalink":"/type-challenges/easy/awaited/","description":"提问 Github: Awaited 假如我们有一个 Promise 对象，这个 Promise 对象会返回一个类型。在 TS 中，我们用 Promise 中的 T 来描述这个 Promise 返回的类型。请你实现一个类型，可以获取这个类型。 例如：Promise<ExampleType>，请你返回 ExampleType 类型。 解题思路 这个挑战中...","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;const isDark = um === 'dark' || (um !== 'light' && sm);document.documentElement.dataset.theme = isDark ? 'dark' : 'light';})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"],["meta",{"property":"og:url","content":"https://wangjw.cn/type-challenges/easy/awaited/"}],["meta",{"property":"og:site_name","content":"ross.dev"}],["meta",{"property":"og:title","content":"Awaited"}],["meta",{"property":"og:description","content":"提问 Github: Awaited 假如我们有一个 Promise 对象，这个 Promise 对象会返回一个类型。在 TS 中，我们用 Promise 中的 T 来描述这个 Promise 返回的类型。请你实现一个类型，可以获取这个类型。 例如：Promise<ExampleType>，请你返回 ExampleType 类型。 解题思路 这个挑战中..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-10-04T06:47:40.000Z"}],["meta",{"property":"article:author","content":"pengzhanbo"}],["meta",{"property":"article:modified_time","content":"2024-10-04T06:47:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Awaited\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-10-04T06:47:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"pengzhanbo\\"}]}"]]},"headers":[{"level":3,"title":"解题思路","slug":"解题思路","link":"#解题思路","children":[]},{"level":3,"title":"答案","slug":"答案","link":"#答案","children":[]},{"level":3,"title":"参考","slug":"参考","link":"#参考","children":[]}],"readingTime":{"minutes":1.11,"words":334},"git":{"createdTime":1728024460000,"updatedTime":1728024460000,"contributors":[{"name":"wangjw","email":"wangjw","commits":1}]},"autoDesc":true,"filePathRelative":"notes/type-challenges/简单/awaited.md"}`);export{r as comp,h as data};
